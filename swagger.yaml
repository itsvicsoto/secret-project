swagger: '2.0'
info:
  title: The Secret Project
  version: 1.0.0

tags:
- name: users
  description: users API
- name: auth
  description: auth API for user login, signup, logout

securityDefinitions:
  ApiKeyAuth:       
      type: apiKey
      in: header    
      name: Authorization

paths:
# [GET] users
  /users:
    get:
      tags:
      - users
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - ApiKeyAuth: []
      summary: Find All Users
      responses:
        200:
          description: 'Successful Response'
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/users'
              message:
                type: string
                example: 'findAll'
        404:
          description: 'Authentication Missing'
          schema:
            $ref: '#/definitions/ErrorResponse404'
        500:
          description: 'Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'

# [POST] users
    post:
      tags:
      - users
      security:
        - ApiKeyAuth: []
      summary: Add User
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
              default: 'your.email@domain.com'
            password:
              type: string
            first_name:
              type: string
            last_name:
              type: string
      responses:
        201:
          description: 'Created'
          schema:
            type: object
            properties:
              data:
                type: object
                $ref: '#/definitions/users'
              message:
                type: string
                example: 'created'
        400:
          description: 'Bad Request'
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'email must be an email, password must be a string'
        409:
          description: 'Conflict'
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Your email your.email@domain.com already exists'
        404:
          description: 'Authentication Missing'
          schema:
            $ref: '#/definitions/ErrorResponse404'
        500:
          description: 'Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'

# [GET] users/id
  /users/{id}:
    get:
      tags:
      - users
      security:
        - ApiKeyAuth: []
      summary: Find User By Id
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - name: id
        type: string
        in: path
        description: User Id
        required: true
      responses:
        200:
          description: 'Successful Response'
          schema:
            type: object
            properties:
              data:
                type: object
                $ref: '#/definitions/users'
              message:
                type: string
                example: 'findOne'
        400:
          description: 'Bad Request'
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'id must be a mongodb id'
        409:
          description: 'Conflict'
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Youre not user'
        404:
          description: 'Authentication Missing'
          schema:
            $ref: '#/definitions/ErrorResponse404'
        500:
          description: 'Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'

# [PUT] users/id
    put:
      tags:
      - users
      security:
        - ApiKeyAuth: []
      summary: Update User By Id
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - name: id
        type: string
        in: path
        description: user Id
        required: true
      - name: body
        in: body
        description: user Data
        required: true
        properties:
          email:
            type: string
            default: 'your.email@domain.com'
          password:
            type: string
          first_name:
            type: string
          last_name:
            type: string
      responses:
        200:
          description: 'Successful Response'
          schema:
            type: object
            properties:
              data:
                type: object
                $ref: '#/definitions/users'
              message:
                type: string
                example: 'updated'
        400:
          description: 'Bad Request'
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'id must be a mongodb id'
        409:
          description: 'Conflict'
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Youre not user'
        404:
          description: 'Authentication Missing'
          schema:
            $ref: '#/definitions/ErrorResponse404'
        500:
          description: 'Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'

# [DELETE] users/id
    delete:
      tags:
      - users
      security:
        - ApiKeyAuth: []
      summary: Delete User By Id
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - name: id
        type: string
        in: path
        description: user Id
        required: true
      responses:
        200:
          description: 'Successful Response'
          schema:
            type: object
            properties:
              data:
                type: object
                $ref: '#/definitions/users'
              message:
                type: string
                example: 'deleted'
        400:
          description: 'Bad Request'
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'id must be a mongodb id'
        409:
          description: 'Conflict'
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Youre not user'
        404:
          description: 'Authentication Missing'
          schema:
            $ref: '#/definitions/ErrorResponse404'
        500:
          description: 'Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'

# [POST] signup
  /signup:
    post:
      tags:
      - auth
      summary: Sign up or register a user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
              default: 'your.email@domain.com'
            password:
              type: string
            first_name:
              type: string
            last_name:
              type: string
      responses:
        201:
          description: 'Created'
          schema:
            type: object
            properties:
              data:
                type: object
                $ref: '#/definitions/users'
              message:
                type: string
                example: 'signup'
        400:
          description: 'Bad Request'
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'email must be an email, password must be a string'
        409:
          description: 'Conflict'
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Your email your.email@domain.com already exists'
        500:
          description: 'Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
          
# [POST] login
  /login:
    post:
      tags:
      - auth
      summary: Login an existing user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
              default: 'your.email@domain.com'
            password:
              type: string
      responses:
        200:
          description: 'Successful Response'
          schema:
            type: object
            properties:
              data:
                type: object
                $ref: '#/definitions/users'
              message:
                type: string
                example: 'login'
        400:
          description: 'Bad Request'
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'email must be an email, password must be a string'
        409:
          description: 'Conflict'
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Your password not matching'
        500:
          description: 'Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
          
# [POST] logout
  /logout:
    post:
      tags:
      - auth
      summary: Logout a user
      responses:
        200:
          description: 'Successful Response'
          schema:
            type: object
            properties:
              data:
                type: object
                $ref: '#/definitions/users'
              message:
                type: string
                example: 'logout'
        404:
          description: 'Error: Not Found'
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Authentication token missing'
        500:
          description: 'Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'

# [GET] /
  /:
    get:
      summary: Index
      responses:
        200:
          description: 'Successful Response'
          schema:
            type: string
            example: 'OK'
        500:
          description: 'Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'

# definitions
definitions:
  users:
    type: object
    required:
        - email
        - password
    properties:
      id:
        description: user Id
      email:
        type: string
        description: user Email
        example: 'john.snow@gmail.com'
      first_name:
        type: string
        description: user first name
        example: 'John'
      last_name:
        type: string
        description: user last name
        example: 'Snow'
      password:
        type: string
  ErrorResponse500:
    type: object
    properties:
      message:
        type: string
        description: Internal Server Error Message Description
        example: 'Internal Server Error Occurred'
  ErrorResponse404:
    type: object
    properties:
      message:
        type: string
        description: Authentication token missing
        example: 'Authentication token missing'

schemes:
 - https
 - http
